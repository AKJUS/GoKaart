{
    "AddParkingFee": {
        "filters": [
            "nodes, ways, relations with amenity = parking\n        and access ~ yes|customers|public\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    ",
            "nodes, ways, relations with amenity = parking\n        and access ~ yes|customers|public\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    "
        ],
        "filter": "nodes, ways, relations with amenity = parking\n        and access ~ yes|customers|public\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    ",
        "description": "Add whether there is a parking fee",
        "wiki": "Tag:amenity=parking",
        "icon": "ic_quest_parking_fee",
        "title": "quest_parking_fee_title"
    },
    "AddCyclewaySegregation": {
        "filters": [
            "ways with\n        (\n          (highway = path and bicycle = designated and foot = designated)\n          or (highway = footway and bicycle = designated)\n          or (highway = cycleway and foot ~ designated|yes)\n        )\n        and surface ~ ${ANYTHING_PAVED.joinToString("
        ],
        "filter": "ways with\n        (\n          (highway = path and bicycle = designated and foot = designated)\n          or (highway = footway and bicycle = designated)\n          or (highway = cycleway and foot ~ designated|yes)\n        )\n        and surface ~ ${ANYTHING_PAVED.joinToString(",
        "description": "Add segregated status for combined footway with cycleway",
        "wiki": "Key:segregated",
        "icon": "ic_quest_path_segregation",
        "title": "quest_segregated_title"
    },
    "AddMotorcycleParkingCapacity": {
        "filters": [
            "nodes, ways with amenity = motorcycle_parking\n         and access !~ private|no\n         and (!capacity or capacity older today -4 years)\n    ",
            "nodes, ways with amenity = motorcycle_parking\n         and access !~ private|no\n         and (!capacity or capacity older today -4 years)\n    "
        ],
        "filter": "nodes, ways with amenity = motorcycle_parking\n         and access !~ private|no\n         and (!capacity or capacity older today -4 years)\n    ",
        "description": "Add motorcycle parking capacities",
        "wiki": "Tag:amenity=motorcycle_parking",
        "icon": "ic_quest_motorcycle_parking_capacity",
        "title": "quest_motorcycleParkingCapacity_title"
    },
    "AddTrafficSignalsVibration": {
        "filters": [
            "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot!=no\n        and (\n          !traffic_signals:vibration\n          or traffic_signals:vibration = no and traffic_signals:vibration older today -4 years\n          or traffic_signals:vibration older today -8 years\n        )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n    ",
            "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot!=no\n        and (\n          !traffic_signals:vibration\n          or traffic_signals:vibration = no and traffic_signals:vibration older today -4 years\n          or traffic_signals:vibration older today -8 years\n        )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n    "
        ],
        "filter": "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot!=no\n        and (\n          !traffic_signals:vibration\n          or traffic_signals:vibration = no and traffic_signals:vibration older today -4 years\n          or traffic_signals:vibration older today -8 years\n        )\n    ",
        "description": "Add whether traffic signals have tactile indication that it's safe to cross",
        "wiki": "Key:traffic_signals:vibration",
        "icon": "ic_quest_blind_traffic_lights",
        "title": "quest_traffic_signals_vibrate_title"
    },
    "AddTrafficSignalsSound": {
        "filters": [
            "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot != no\n        and (\n          !traffic_signals:sound\n          or traffic_signals:sound = no and traffic_signals:sound older today -4 years\n          or traffic_signals:sound older today -8 years\n        )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n    ",
            "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot != no\n        and (\n          !traffic_signals:sound\n          or traffic_signals:sound = no and traffic_signals:sound older today -4 years\n          or traffic_signals:sound older today -8 years\n        )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n    "
        ],
        "filter": "nodes with crossing = traffic_signals and highway ~ crossing|traffic_signals and foot != no\n        and (\n          !traffic_signals:sound\n          or traffic_signals:sound = no and traffic_signals:sound older today -4 years\n          or traffic_signals:sound older today -8 years\n        )\n    ",
        "description": "Add whether traffic signals have sound signals",
        "wiki": "Key:traffic_signals:sound",
        "icon": "ic_quest_blind_traffic_lights_sound",
        "title": "quest_traffic_signals_sound_title"
    },
    "AddForestLeafType": {
        "filters": [
            "ways, relations with (landuse = forest or natural = wood) and !leaf_type\n    ",
            "ways with natural = tree_row and !leaf_type\n    ",
            "ways, relations with (landuse = forest or natural = wood) and !leaf_type\n    ",
            "ways with natural = tree_row and !leaf_type\n    "
        ],
        "filter": "ways, relations with (landuse = forest or natural = wood) and !leaf_type\n    ",
        "description": "Add leaf type",
        "wiki": "Key:leaf_type",
        "icon": "ic_quest_leaf",
        "title": "quest_leafType_title"
    },
    "DetermineRecyclingGlass": {
        "filters": [
            "nodes with amenity = recycling and recycling_type = container\n         and recycling:glass = yes and !recycling:glass_bottles\n    ",
            "nodes with amenity = recycling and recycling_type = container\n         and recycling:glass = yes and !recycling:glass_bottles\n    "
        ],
        "filter": "nodes with amenity = recycling and recycling_type = container\n         and recycling:glass = yes and !recycling:glass_bottles\n    ",
        "description": "Determine whether any glass or just glass bottles can be recycled here",
        "wiki": "Key:recycling",
        "icon": "ic_quest_recycling_glass",
        "title": "quest_recycling_glass_title"
    },
    "AddToiletsFee": {
        "filters": [
            "nodes, ways with\n          amenity = toilets\n          and access !~ private|customers\n          and !fee\n    ",
            "nodes, ways with\n          amenity = toilets\n          and access !~ private|customers\n          and !fee\n    "
        ],
        "filter": "nodes, ways with\n          amenity = toilets\n          and access !~ private|customers\n          and !fee\n    ",
        "description": "Add toilets fee",
        "wiki": "Key:fee",
        "icon": "ic_quest_toilet_fee",
        "title": "quest_toiletsFee_title"
    },
    "AddBridgeStructure": {
        "filters": [
            "ways with man_made = bridge and !bridge:structure and !bridge:movable"
        ],
        "filter": "ways with man_made = bridge and !bridge:structure and !bridge:movable",
        "description": "Add bridge structures",
        "wiki": "Key:bridge:structure",
        "icon": "ic_quest_bridge",
        "title": "quest_bridge_structure_title"
    },
    "AddStepsRamp": {
        "filters": [
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and ramp != separate\n         and (\n           !ramp\n           or (ramp = yes and !ramp:stroller and !ramp:bicycle and !ramp:wheelchair)\n           or ramp = no and ramp older today -4 years\n           or ramp older today -8 years\n         )\n    ",
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and ramp != separate\n         and (\n           !ramp\n           or (ramp = yes and !ramp:stroller and !ramp:bicycle and !ramp:wheelchair)\n           or ramp = no and ramp older today -4 years\n           or ramp older today -8 years\n         )\n    "
        ],
        "filter": "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and ramp != separate\n         and (\n           !ramp\n           or (ramp = yes and !ramp:stroller and !ramp:bicycle and !ramp:wheelchair)\n           or ramp = no and ramp older today -4 years\n           or ramp older today -8 years\n         )\n    ",
        "description": "Add whether steps have a ramp",
        "wiki": "Key:ramp",
        "icon": "ic_quest_steps_ramp",
        "title": "quest_steps_ramp_title"
    },
    "AddMaxWeight": {
        "filters": [
            "ways with highway ~ trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|residential|living_street|service\n         and service != driveway\n         and !maxweight and maxweight:signed != no\n         and !maxaxleload\n         and !maxbogieweight\n         and !maxweight:hgv and !maxweight:bus and !maxweight:hgv_articulated and !maxweight:tourist_bus and !maxweight:coach\n         and !maxweightrating and !maxweightrating:hgv and !maxweightrating:bus and !hgv\n         and !maxunladenweight and !maxunladenweight:hgv and !maxunladenweight:bus\n         and bridge and bridge != no\n         and motor_vehicle !~ private|no\n         and vehicle !~ private|no\n         and (access !~ private|no or (foot and foot !~ private|no))\n         and area != yes\n    ",
            "ways with highway ~ trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|residential|living_street|service\n         and service != driveway\n         and !maxweight and maxweight:signed != no\n         and !maxaxleload\n         and !maxbogieweight\n         and !maxweight:hgv and !maxweight:bus and !maxweight:hgv_articulated and !maxweight:tourist_bus and !maxweight:coach\n         and !maxweightrating and !maxweightrating:hgv and !maxweightrating:bus and !hgv\n         and !maxunladenweight and !maxunladenweight:hgv and !maxunladenweight:bus\n         and bridge and bridge != no\n         and motor_vehicle !~ private|no\n         and vehicle !~ private|no\n         and (access !~ private|no or (foot and foot !~ private|no))\n         and area != yes\n    "
        ],
        "filter": "ways with highway ~ trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|residential|living_street|service\n         and service != driveway\n         and !maxweight and maxweight:signed != no\n         and !maxaxleload\n         and !maxbogieweight\n         and !maxweight:hgv and !maxweight:bus and !maxweight:hgv_articulated and !maxweight:tourist_bus and !maxweight:coach\n         and !maxweightrating and !maxweightrating:hgv and !maxweightrating:bus and !hgv\n         and !maxunladenweight and !maxunladenweight:hgv and !maxunladenweight:bus\n         and bridge and bridge != no\n         and motor_vehicle !~ private|no\n         and vehicle !~ private|no\n         and (access !~ private|no or (foot and foot !~ private|no))\n         and area != yes\n    ",
        "description": "Add maximum allowed weight",
        "wiki": "Key:maxweight",
        "icon": "ic_quest_max_weight",
        "title": "quest_maxweight_title"
    },
    "AddBarrierType": {
        "filters": [
            "nodes with barrier=yes\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n    ",
            "nodes with barrier=yes\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n    "
        ],
        "filter": "nodes with barrier=yes\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n    ",
        "description": "Add specific barrier type on a point",
        "wiki": "Key:barrier",
        "icon": "ic_quest_barrier",
        "title": "quest_barrier_type_title"
    },
    "AddTrafficSignalsButton": {
        "filters": [
            "nodes with\n          crossing = traffic_signals\n          and highway ~ crossing|traffic_signals\n          and foot != no\n          and !button_operated\n    ",
            "nodes with\n          crossing = traffic_signals\n          and highway ~ crossing|traffic_signals\n          and foot != no\n          and !button_operated\n    "
        ],
        "filter": "nodes with\n          crossing = traffic_signals\n          and highway ~ crossing|traffic_signals\n          and foot != no\n          and !button_operated\n    ",
        "description": "Add whether traffic signals have a button for pedestrians",
        "wiki": "Tag:highway=traffic_signals",
        "key": "button_operated",
        "icon": "ic_quest_traffic_lights",
        "title": "quest_traffic_signals_button_title"
    },
    "AddAddressStreet": {
        "filters": [
            "nodes, ways, relations with\n          addr:housenumber and !addr:street and !addr:place and !addr:block_number\n          or addr:streetnumber and !addr:street\n    ",
            "ways with\n          addr:street and addr:interpolation\n    ",
            "nodes, ways, relations with\n          addr:housenumber and !addr:street and !addr:place and !addr:block_number\n          or addr:streetnumber and !addr:street\n    ",
            "ways with\n          addr:street and addr:interpolation\n    "
        ],
        "filter": "nodes, ways, relations with\n          addr:housenumber and !addr:street and !addr:place and !addr:block_number\n          or addr:streetnumber and !addr:street\n    ",
        "description": "Add street/place names to address",
        "wiki": "Key:addr",
        "icon": "ic_quest_housenumber_street",
        "title": "quest_address_street_title"
    },
    "AddKosher": {
        "filters": [
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:kosher\n          or diet:kosher != only and diet:kosher older today -4 years\n        )\n    ",
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:kosher\n          or diet:kosher != only and diet:kosher older today -4 years\n        )\n    "
        ],
        "filter": "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:kosher\n          or diet:kosher != only and diet:kosher older today -4 years\n        )\n    ",
        "description": "Add kosher status",
        "wiki": "Key:diet:kosher",
        "icon": "ic_quest_kosher",
        "title": "quest_dietType_kosher_name_title"
    },
    "AddWheelchairAccessToiletsPart": {
        "filters": [
            "nodes, ways, relations with name and toilets = yes\n         and access !~ no|private\n         and (\n           !toilets:wheelchair\n           or toilets:wheelchair != yes and toilets:wheelchair older today -4 years\n           or toilets:wheelchair older today -8 years\n         )\n    ",
            "nodes, ways, relations with name and toilets = yes\n         and access !~ no|private\n         and (\n           !toilets:wheelchair\n           or toilets:wheelchair != yes and toilets:wheelchair older today -4 years\n           or toilets:wheelchair older today -8 years\n         )\n    "
        ],
        "filter": "nodes, ways, relations with name and toilets = yes\n         and access !~ no|private\n         and (\n           !toilets:wheelchair\n           or toilets:wheelchair != yes and toilets:wheelchair older today -4 years\n           or toilets:wheelchair older today -8 years\n         )\n    ",
        "description": "Add wheelchair access to toilets",
        "wiki": "Key:toilets:wheelchair",
        "icon": "ic_quest_toilets_wheelchair",
        "title": "quest_wheelchairAccess_toiletsPart_title"
    },
    "AddTactilePavingCrosswalk": {
        "filters": [
            "nodes with\n          (\n            highway = traffic_signals and crossing = traffic_signals and foot != no\n            or highway = crossing and foot != no\n          )\n          and (\n            !tactile_paving\n            or tactile_paving = unknown\n            or tactile_paving = no and tactile_paving older today -4 years\n            or tactile_paving = yes and tactile_paving older today -8 years\n          )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n          or highway = service and service = driveway\n          or highway and access ~ private|no\n    ",
            "nodes with\n          (\n            highway = traffic_signals and crossing = traffic_signals and foot != no\n            or highway = crossing and foot != no\n          )\n          and (\n            !tactile_paving\n            or tactile_paving = unknown\n            or tactile_paving = no and tactile_paving older today -4 years\n            or tactile_paving = yes and tactile_paving older today -8 years\n          )\n    ",
            "ways with\n          highway = cycleway and foot !~ yes|designated\n          or highway = service and service = driveway\n          or highway and access ~ private|no\n    "
        ],
        "filter": "nodes with\n          (\n            highway = traffic_signals and crossing = traffic_signals and foot != no\n            or highway = crossing and foot != no\n          )\n          and (\n            !tactile_paving\n            or tactile_paving = unknown\n            or tactile_paving = no and tactile_paving older today -4 years\n            or tactile_paving = yes and tactile_paving older today -8 years\n          )\n    ",
        "description": "Add tactile pavings on crosswalks",
        "wiki": "Key:tactile_paving",
        "icon": "ic_quest_blind_pedestrian_crossing",
        "title": "quest_tactilePaving_title"
    },
    "AddBikeParkingAccess": {
        "filters": [
            "nodes, ways, relations with amenity = bicycle_parking\n        and bicycle_parking ~ building|lockers|shed\n        and (!access or access = unknown)\n    ",
            "nodes, ways, relations with amenity = bicycle_parking\n        and bicycle_parking ~ building|lockers|shed\n        and (!access or access = unknown)\n    "
        ],
        "filter": "nodes, ways, relations with amenity = bicycle_parking\n        and bicycle_parking ~ building|lockers|shed\n        and (!access or access = unknown)\n    ",
        "description": "Add type of bike parking access",
        "wiki": "Tag:amenity=bicycle_parking",
        "icon": "ic_quest_bicycle_parking_access",
        "title": "quest_bicycle_parking_access_title"
    },
    "AddRecyclingType": {
        "filters": [
            "nodes, ways, relations with amenity = recycling and !recycling_type"
        ],
        "filter": "nodes, ways, relations with amenity = recycling and !recycling_type",
        "description": "Add recycling type to recycling amenity",
        "wiki": "Key:recycling_type",
        "icon": "ic_quest_recycling",
        "title": "quest_recycling_type_title"
    },
    "AddHandrail": {
        "filters": [
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and (\n           !handrail and !handrail:center and !handrail:left and !handrail:right\n           or handrail = no and handrail older today -4 years\n           or handrail older today -8 years\n           or older today -8 years\n         )\n    ",
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and (\n           !handrail and !handrail:center and !handrail:left and !handrail:right\n           or handrail = no and handrail older today -4 years\n           or handrail older today -8 years\n           or older today -8 years\n         )\n    "
        ],
        "filter": "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and (\n           !handrail and !handrail:center and !handrail:left and !handrail:right\n           or handrail = no and handrail older today -4 years\n           or handrail older today -8 years\n           or older today -8 years\n         )\n    ",
        "description": "Add whether steps have a handrail",
        "wiki": "Key:handrail",
        "icon": "ic_quest_steps_handrail",
        "title": "quest_handrail_title"
    },
    "AddTracktype": {
        "filters": [
            "ways with highway = track\n        and (\n          !tracktype\n          or tracktype != grade1 and tracktype older today -4 years\n          or surface ~ ${ANYTHING_UNPAVED.joinToString("
        ],
        "filter": "ways with highway = track\n        and (\n          !tracktype\n          or tracktype != grade1 and tracktype older today -4 years\n          or surface ~ ${ANYTHING_UNPAVED.joinToString(",
        "description": "Add tracktype",
        "wiki": "Key:tracktype",
        "icon": "ic_quest_tractor",
        "title": "quest_tracktype_title"
    },
    "AddVegan": {
        "filters": [
            "nodes, ways with\n        (\n          amenity = ice_cream\n          or diet:vegetarian ~ yes|only and\n          (\n            amenity ~ restaurant|cafe|fast_food and food != no\n            or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          )\n        )\n        and name and (\n          !diet:vegan\n          or diet:vegan != only and diet:vegan older today -2 years\n        )\n    ",
            "nodes, ways with\n        (\n          amenity = ice_cream\n          or diet:vegetarian ~ yes|only and\n          (\n            amenity ~ restaurant|cafe|fast_food and food != no\n            or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          )\n        )\n        and name and (\n          !diet:vegan\n          or diet:vegan != only and diet:vegan older today -2 years\n        )\n    "
        ],
        "filter": "nodes, ways with\n        (\n          amenity = ice_cream\n          or diet:vegetarian ~ yes|only and\n          (\n            amenity ~ restaurant|cafe|fast_food and food != no\n            or amenity ~ pub|nightclub|biergarten|bar and food = yes\n          )\n        )\n        and name and (\n          !diet:vegan\n          or diet:vegan != only and diet:vegan older today -2 years\n        )\n    ",
        "description": "Add vegan diet type",
        "wiki": "Key:diet",
        "icon": "ic_quest_restaurant_vegan",
        "title": "quest_dietType_vegan_name_title"
    },
    "AddKerbHeight": {
        "filters": [
            "nodes with\n          !kerb\n          or kerb ~ yes|unknown\n          or kerb !~ no|rolled and kerb older today -8 years\n    ",
            "nodes with\n          !kerb\n          or kerb ~ yes|unknown\n          or kerb !~ no|rolled and kerb older today -8 years\n    "
        ],
        "filter": "nodes with\n          !kerb\n          or kerb ~ yes|unknown\n          or kerb !~ no|rolled and kerb older today -8 years\n    ",
        "description": "Add kerb height info",
        "wiki": "Key:kerb",
        "icon": "ic_quest_kerb_type",
        "title": "quest_kerb_height_title"
    },
    "AddStepsIncline": {
        "filters": [
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and area != yes\n         and access !~ private|no\n         and !incline\n    ",
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and area != yes\n         and access !~ private|no\n         and !incline\n    "
        ],
        "filter": "ways with highway = steps\n         and (!indoor or indoor = no)\n         and area != yes\n         and access !~ private|no\n         and !incline\n    ",
        "description": "Add which way leads up for these steps",
        "wiki": "Key:incline",
        "icon": "ic_quest_steps",
        "title": "quest_steps_incline_title"
    },
    "AddBikeParkingCapacity": {
        "filters": [
            "nodes, ways with amenity = bicycle_parking\n         and access !~ private|no\n         and bicycle_parking !~ floor\n         and (\n           !capacity\n           or bicycle_parking ~ stands|wall_loops and capacity older today -4 years\n         )\n    ",
            "nodes, ways with amenity = bicycle_parking\n         and access !~ private|no\n         and bicycle_parking !~ floor\n         and (\n           !capacity\n           or bicycle_parking ~ stands|wall_loops and capacity older today -4 years\n         )\n    "
        ],
        "filter": "nodes, ways with amenity = bicycle_parking\n         and access !~ private|no\n         and bicycle_parking !~ floor\n         and (\n           !capacity\n           or bicycle_parking ~ stands|wall_loops and capacity older today -4 years\n         )\n    ",
        "description": "Add bicycle parking capacities",
        "wiki": "Tag:amenity=bicycle_parking",
        "icon": "ic_quest_bicycle_parking_capacity",
        "title": "quest_bikeParkingCapacity_title"
    },
    "AddHalal": {
        "filters": [
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:halal\n          or diet:halal != only and diet:halal older today -4 years\n        )\n    ",
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:halal\n          or diet:halal != only and diet:halal older today -4 years\n        )\n    "
        ],
        "filter": "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food|ice_cream and food != no\n          or shop ~ butcher|supermarket|ice_cream\n        )\n        and name and (\n          !diet:halal\n          or diet:halal != only and diet:halal older today -4 years\n        )\n    ",
        "description": "Add Halal status",
        "wiki": "Key:diet:halal",
        "icon": "ic_quest_halal",
        "title": "quest_dietType_halal_name_title"
    },
    "AddDrinkingWater": {
        "filters": [
            "nodes with (\n            man_made = water_tap\n            or man_made = water_well\n            or natural = spring\n        )\n        and access !~ private|no and indoor != yes\n        and !drinking_water and !drinking_water:legal and amenity != drinking_water\n    ",
            "nodes with (\n            man_made = water_tap\n            or man_made = water_well\n            or natural = spring\n        )\n        and access !~ private|no and indoor != yes\n        and !drinking_water and !drinking_water:legal and amenity != drinking_water\n    "
        ],
        "filter": "nodes with (\n            man_made = water_tap\n            or man_made = water_well\n            or natural = spring\n        )\n        and access !~ private|no and indoor != yes\n        and !drinking_water and !drinking_water:legal and amenity != drinking_water\n    ",
        "description": "Add whether water is drinkable",
        "wiki": "Key:drinking_water",
        "icon": "ic_quest_drinking_water",
        "title": "quest_drinking_water_title"
    },
    "AddChargingStationOperator": {
        "filters": [
            "nodes, ways with\n          amenity = charging_station\n          and !operator and !name and !brand\n    ",
            "nodes, ways with\n          amenity = charging_station\n          and !operator and !name and !brand\n    "
        ],
        "filter": "nodes, ways with\n          amenity = charging_station\n          and !operator and !name and !brand\n    ",
        "description": "Add charging station operator",
        "wiki": "Tag:amenity=charging_station",
        "icon": "ic_quest_car_charger",
        "title": "quest_charging_station_operator_title"
    },
    "AddClothingBinOperator": {
        "filters": [
            "nodes with amenity = recycling and recycling_type = container\n         and recycling:clothes = yes\n         and !operator and !name and !brand\n    ",
            "nodes with amenity = recycling and recycling_type = container\n         and recycling:clothes = yes\n         and !operator and !name and !brand\n    "
        ],
        "filter": "nodes with amenity = recycling and recycling_type = container\n         and recycling:clothes = yes\n         and !operator and !name and !brand\n    ",
        "description": "Add clothing bin operator",
        "wiki": "Tag:amenity=recycling",
        "icon": "ic_quest_recycling_clothes",
        "title": "quest_clothes_container_operator_title"
    },
    "AddProhibitedForPedestrians": {
        "filters": [
            "ways with (\n          ~'sidewalk(:both)?' ~ none|no or\n          (sidewalk:left ~ none|no and sidewalk:right ~ none|no)\n        )\n        and shoulder != yes\n        and !foot\n        and access !~ private|no\n        ",
            "ways with (\n          ~'sidewalk(:both)?' ~ none|no or\n          (sidewalk:left ~ none|no and sidewalk:right ~ none|no)\n        )\n        and shoulder != yes\n        and !foot\n        and access !~ private|no\n        "
        ],
        "filter": "ways with (\n          ~'sidewalk(:both)?' ~ none|no or\n          (sidewalk:left ~ none|no and sidewalk:right ~ none|no)\n        )\n        and shoulder != yes\n        and !foot\n        and access !~ private|no\n        ",
        "description": "Add whether roads are prohibited for pedestrians",
        "wiki": "Key:foot",
        "icon": "ic_quest_no_pedestrians",
        "title": "quest_accessible_for_pedestrians_title"
    },
    "AddVegetarian": {
        "filters": [
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n        )\n        and name and diet:vegan != only and (\n          !diet:vegetarian\n          or diet:vegetarian != only and diet:vegetarian older today -2 years\n        )\n    ",
            "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n        )\n        and name and diet:vegan != only and (\n          !diet:vegetarian\n          or diet:vegetarian != only and diet:vegetarian older today -2 years\n        )\n    "
        ],
        "filter": "nodes, ways with\n        (\n          amenity ~ restaurant|cafe|fast_food and food != no\n          or amenity ~ pub|nightclub|biergarten|bar and food = yes\n        )\n        and name and diet:vegan != only and (\n          !diet:vegetarian\n          or diet:vegetarian != only and diet:vegetarian older today -2 years\n        )\n    ",
        "description": "Add vegetarian diet type",
        "wiki": "Key:diet",
        "icon": "ic_quest_restaurant_vegetarian",
        "title": "quest_dietType_vegetarian_name_title"
    },
    "AddHousenumber": {
        "filters": [
            "ways, relations with\n      building ~ house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office|house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office\n      and location != underground\n      and ruins != yes\n      and abandoned != yes\n      and !addr:housenumber\n      and !addr:housename\n      and !addr:conscriptionnumber\n      and !addr:streetnumber\n      and !noaddress\n      and !nohousenumber\n    ",
            "ways, relations with !building",
            "ways, relations with\n      !building and ~",
            "relations with\n      type != multipolygon\n      and ~",
            "nodes with ~",
            "ways, relations with\n      building ~ house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office|house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office\n      and location != underground\n      and ruins != yes\n      and abandoned != yes\n      and !addr:housenumber\n      and !addr:housename\n      and !addr:conscriptionnumber\n      and !addr:streetnumber\n      and !noaddress\n      and !nohousenumber\n    "
        ],
        "filter": "ways, relations with\n      building ~ house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office|house|residential|apartments|detached|terrace|dormitory|semi|semidetached_house|farm|school|civic|college|university|public|hospital|kindergarten|train_station|hotel|retail|shop|commercial|office\n      and location != underground\n      and ruins != yes\n      and abandoned != yes\n      and !addr:housenumber\n      and !addr:housename\n      and !addr:conscriptionnumber\n      and !addr:streetnumber\n      and !noaddress\n      and !nohousenumber\n    ",
        "description": "Add housenumbers",
        "wiki": "Key:addr",
        "icon": "ic_quest_housenumber",
        "title": "quest_address_title"
    },
    "AddStepCount": {
        "filters": [
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and !step_count\n    ",
            "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and !step_count\n    "
        ],
        "filter": "ways with highway = steps\n         and (!indoor or indoor = no)\n         and access !~ private|no\n         and (!conveying or conveying = no)\n         and !step_count\n    ",
        "description": "Add step count",
        "wiki": "Key:step_count",
        "icon": "ic_quest_steps_count",
        "title": "quest_step_count_title"
    },
    "AddPostboxRoyalCypher": {
        "filters": [
            "nodes with\n          amenity = post_box\n          and !royal_cypher\n    ",
            "nodes with\n          amenity = post_box\n          and !royal_cypher\n    "
        ],
        "filter": "nodes with\n          amenity = post_box\n          and !royal_cypher\n    ",
        "description": "Add postbox royal cypher",
        "wiki": "Key:royal_cypher",
        "icon": "ic_quest_crown",
        "title": "quest_postboxRoyalCypher_title"
    },
    "CheckShopType": {
        "filters": [
            "nodes, ways, relations with ${isKindOfShopExpression()}\n    ",
            "nodes, ways, relations with (\n          shop = vacant\n          or ${isKindOfShopExpression(",
            "nodes, ways, relations with ${isKindOfShopExpression()}\n    "
        ],
        "filter": "nodes, ways, relations with (\n          shop = vacant\n          or ${isKindOfShopExpression(",
        "description": "Check if vacant shop is still vacant",
        "wiki": "Key:disused:",
        "icon": "ic_quest_check_shop",
        "title": "quest_shop_vacant_type_title"
    },
    "AddTrafficCalmingType": {
        "filters": [
            "nodes with traffic_calming=yes\n    ",
            "nodes with traffic_calming=yes\n    "
        ],
        "filter": "nodes with traffic_calming=yes\n    ",
        "description": "Add specific traffic calming type on a point",
        "wiki": "Key:traffic_calming",
        "icon": "ic_quest_car_bumpy",
        "title": "quest_traffic_calming_type_title"
    },
    "AddParkingAccess": {
        "filters": [
            "nodes, ways, relations with amenity = parking\n        and (\n            access = unknown\n            or (!access and parking !~ street_side|lane)\n        )\n    ",
            "nodes, ways, relations with amenity = parking\n        and (\n            access = unknown\n            or (!access and parking !~ street_side|lane)\n        )\n    "
        ],
        "filter": "nodes, ways, relations with amenity = parking\n        and (\n            access = unknown\n            or (!access and parking !~ street_side|lane)\n        )\n    ",
        "description": "Add type of parking access",
        "wiki": "Tag:amenity=parking",
        "key": "access",
        "icon": "ic_quest_parking_access",
        "title": "quest_parking_access_title"
    },
    "AddFootwayPartSurface": {
        "filters": [
            "ways with (\n          highway = footway\n          or (highway ~ path|cycleway|bridleway and foot != no)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !footway:surface\n          or footway:surface older today -8 years\n          or (\n            footway:surface ~ paved|unpaved\n            and !footway:surface:note\n            and !note:footway:surface\n          )\n        )\n    ",
            "ways with (\n          highway = footway\n          or (highway ~ path|cycleway|bridleway and foot != no)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !footway:surface\n          or footway:surface older today -8 years\n          or (\n            footway:surface ~ paved|unpaved\n            and !footway:surface:note\n            and !note:footway:surface\n          )\n        )\n    "
        ],
        "filter": "ways with (\n          highway = footway\n          or (highway ~ path|cycleway|bridleway and foot != no)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !footway:surface\n          or footway:surface older today -8 years\n          or (\n            footway:surface ~ paved|unpaved\n            and !footway:surface:note\n            and !note:footway:surface\n          )\n        )\n    ",
        "description": "Add path surfaces",
        "wiki": "Key:surface",
        "icon": "ic_quest_footway_surface",
        "title": "quest_footwayPartSurface_title"
    },
    "AddSummitRegister": {
        "filters": [
            "nodes with\n          natural = peak and name and\n          (!summit:register or summit:register older today -4 years)\n    ",
            "nodes with\n          natural = peak and name and\n          (!summit:register or summit:register older today -4 years)\n    "
        ],
        "filter": "nodes with\n          natural = peak and name and\n          (!summit:register or summit:register older today -4 years)\n    ",
        "description": "Add whether summit register is present",
        "wiki": "Key:summit:register",
        "icon": "ic_quest_peak",
        "title": "quest_summit_register_title"
    },
    "AddBenchBackrest": {
        "filters": [
            "nodes, ways with\n          amenity = bench\n          and (!area or area = no)\n          and !backrest\n          and !bench:type\n    ",
            "nodes, ways with\n          amenity = bench\n          and (!area or area = no)\n          and !backrest\n          and !bench:type\n    "
        ],
        "filter": "nodes, ways with\n          amenity = bench\n          and (!area or area = no)\n          and !backrest\n          and !bench:type\n    ",
        "description": "Add backrest information to benches",
        "wiki": "Tag:amenity=bench",
        "icon": "ic_quest_bench_poi",
        "title": "quest_bench_backrest_title"
    },
    "AddCyclewayPartSurface": {
        "filters": [
            "ways with (\n          highway = cycleway\n          or (highway ~ path|footway and bicycle != no)\n          or (highway = bridleway and bicycle ~ designated|yes)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !cycleway:surface\n          or cycleway:surface older today -8 years\n          or (\n            cycleway:surface ~ paved|unpaved\n            and !cycleway:surface:note\n            and !note:cycleway:surface\n          )\n        )\n    ",
            "ways with (\n          highway = cycleway\n          or (highway ~ path|footway and bicycle != no)\n          or (highway = bridleway and bicycle ~ designated|yes)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !cycleway:surface\n          or cycleway:surface older today -8 years\n          or (\n            cycleway:surface ~ paved|unpaved\n            and !cycleway:surface:note\n            and !note:cycleway:surface\n          )\n        )\n    "
        ],
        "filter": "ways with (\n          highway = cycleway\n          or (highway ~ path|footway and bicycle != no)\n          or (highway = bridleway and bicycle ~ designated|yes)\n        )\n        and segregated = yes\n        and !sidewalk\n        and (\n          !cycleway:surface\n          or cycleway:surface older today -8 years\n          or (\n            cycleway:surface ~ paved|unpaved\n            and !cycleway:surface:note\n            and !note:cycleway:surface\n          )\n        )\n    ",
        "description": "Add path surfaces",
        "wiki": "Key:surface",
        "icon": "ic_quest_bicycleway_surface",
        "title": "quest_cyclewayPartSurface_title"
    },
    "AddFireHydrantDiameter": {
        "filters": [
            "nodes with\n         emergency = fire_hydrant\n         and !fire_hydrant:diameter\n         and fire_hydrant:diameter:signed != no\n    ",
            "nodes with\n         emergency = fire_hydrant\n         and !fire_hydrant:diameter\n         and fire_hydrant:diameter:signed != no\n    "
        ],
        "filter": "nodes with\n         emergency = fire_hydrant\n         and !fire_hydrant:diameter\n         and fire_hydrant:diameter:signed != no\n    ",
        "description": "Add fire hydrant diameter",
        "wiki": "Tag:emergency=fire_hydrant",
        "icon": "ic_quest_fire_hydrant_diameter",
        "title": "quest_fireHydrant_diameter_title"
    },
    "AddRecyclingContainerMaterials": {
        "filters": [
            "nodes with\n          amenity = recycling\n          and recycling_type = container\n          and access !~ private|no\n    ",
            "nodes with\n          amenity = recycling\n          and recycling_type = container\n          and access !~ private|no\n    "
        ],
        "filter": "nodes with\n          amenity = recycling\n          and recycling_type = container\n          and access !~ private|no\n    ",
        "description": "Add recycled materials to container",
        "wiki": "Key:recycling",
        "icon": "ic_quest_recycling_container",
        "title": "quest_recycling_materials_title"
    },
    "AddStileType": {
        "filters": [
            "nodes with\n         barrier = stile\n         and (!stile or older today -8 years)\n    ",
            "ways with\n          access ~ private|no\n          and foot !~ permissive|yes|designated\n    ",
            "nodes with\n         barrier = stile\n         and (!stile or older today -8 years)\n    ",
            "ways with\n          access ~ private|no\n          and foot !~ permissive|yes|designated\n    "
        ],
        "filter": "ways with\n          access ~ private|no\n          and foot !~ permissive|yes|designated\n    ",
        "description": "Add specific stile type",
        "wiki": "Key:stile",
        "icon": "ic_quest_cow",
        "title": "quest_stile_type_title"
    },
    "AddPicnicTableCover": {
        "filters": [
            "nodes with leisure = picnic_table\n        and access !~ private|no\n        and !covered\n    ",
            "nodes with leisure = picnic_table\n        and access !~ private|no\n        and !covered\n    "
        ],
        "filter": "nodes with leisure = picnic_table\n        and access !~ private|no\n        and !covered\n    ",
        "description": "Add picnic table cover",
        "wiki": "Key:covered",
        "icon": "ic_quest_picnic_table_cover",
        "title": "quest_picnicTableCover_title"
    },
    "AddWheelchairAccessOutside": {
        "filters": [
            "nodes, ways, relations with leisure = dog_park\n         and access !~ no|private\n         and (!wheelchair or wheelchair older today -8 years)\n    ",
            "nodes, ways, relations with leisure = dog_park\n         and access !~ no|private\n         and (!wheelchair or wheelchair older today -8 years)\n    "
        ],
        "filter": "nodes, ways, relations with leisure = dog_park\n         and access !~ no|private\n         and (!wheelchair or wheelchair older today -8 years)\n    ",
        "description": "Add wheelchair access to outside places",
        "wiki": "Key:wheelchair",
        "icon": "ic_quest_toilets_wheelchair",
        "title": "quest_wheelchairAccess_outside_title"
    },
    "AddTactilePavingKerb": {
        "filters": [
            "nodes with\n          !tactile_paving\n          or tactile_paving = unknown\n          or tactile_paving = no and tactile_paving older today -4 years\n          or tactile_paving = yes and tactile_paving older today -8 years\n    ",
            "nodes with\n          !tactile_paving\n          or tactile_paving = unknown\n          or tactile_paving = no and tactile_paving older today -4 years\n          or tactile_paving = yes and tactile_paving older today -8 years\n    "
        ],
        "filter": "nodes with\n          !tactile_paving\n          or tactile_paving = unknown\n          or tactile_paving = no and tactile_paving older today -4 years\n          or tactile_paving = yes and tactile_paving older today -8 years\n    ",
        "description": "Add tactile paving on kerbs",
        "wiki": "Key:tactile_paving",
        "icon": "ic_quest_kerb_tactile_paving",
        "title": "quest_tactile_paving_kerb_title"
    },
    "AddBoardType": {
        "filters": [
            "nodes with information = board\n         and access !~ private|no\n         and (!board_type or board_type ~ yes|board)\n    ",
            "nodes with information = board\n         and access !~ private|no\n         and (!board_type or board_type ~ yes|board)\n    "
        ],
        "filter": "nodes with information = board\n         and access !~ private|no\n         and (!board_type or board_type ~ yes|board)\n    ",
        "description": "Add board type",
        "wiki": "Key:board_type",
        "icon": "ic_quest_board_type",
        "title": "quest_board_type_title"
    },
    "AddGeneralFee": {
        "filters": [
            "nodes, ways, relations with\n         (tourism = museum or leisure = beach_resort or tourism = gallery)\n         and access !~ private|no\n         and !fee\n         and name\n    ",
            "nodes, ways, relations with\n         (tourism = museum or leisure = beach_resort or tourism = gallery)\n         and access !~ private|no\n         and !fee\n         and name\n    "
        ],
        "filter": "nodes, ways, relations with\n         (tourism = museum or leisure = beach_resort or tourism = gallery)\n         and access !~ private|no\n         and !fee\n         and name\n    ",
        "description": "Add fee info",
        "wiki": "Key:fee",
        "icon": "ic_quest_fee",
        "title": "quest_generalFee_title"
    },
    "AddMotorcycleParkingCover": {
        "filters": [
            "nodes, ways with amenity = motorcycle_parking\n        and access !~ private|no\n        and !covered\n        and motorcycle_parking !~ shed|garage_boxes|building\n    ",
            "nodes, ways with amenity = motorcycle_parking\n        and access !~ private|no\n        and !covered\n        and motorcycle_parking !~ shed|garage_boxes|building\n    "
        ],
        "filter": "nodes, ways with amenity = motorcycle_parking\n        and access !~ private|no\n        and !covered\n        and motorcycle_parking !~ shed|garage_boxes|building\n    ",
        "description": "Add motorcycle parkings cover",
        "wiki": "Tag:amenity=motorcycle_parking",
        "icon": "ic_quest_motorcycle_parking_cover",
        "title": "quest_motorcycleParkingCoveredStatus_title"
    },
    "AddFireHydrantType": {
        "filters": [
            "nodes with emergency = fire_hydrant and !fire_hydrant:type"
        ],
        "filter": "nodes with emergency = fire_hydrant and !fire_hydrant:type",
        "description": "Add fire hydrant type",
        "wiki": "Tag:emergency=fire_hydrant",
        "icon": "ic_quest_fire_hydrant",
        "title": "quest_fireHydrant_type_title"
    },
    "AddBikeParkingFee": {
        "filters": [
            "nodes, ways, relations with amenity = bicycle_parking\n        and access ~ yes|customers|public\n        and (\n            name\n            or bicycle_parking ~ building|lockers|shed\n            or capacity >= 100\n        )\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    ",
            "nodes, ways, relations with amenity = bicycle_parking\n        and access ~ yes|customers|public\n        and (\n            name\n            or bicycle_parking ~ building|lockers|shed\n            or capacity >= 100\n        )\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    "
        ],
        "filter": "nodes, ways, relations with amenity = bicycle_parking\n        and access ~ yes|customers|public\n        and (\n            name\n            or bicycle_parking ~ building|lockers|shed\n            or capacity >= 100\n        )\n        and (\n            !fee and !fee:conditional\n            or fee older today -8 years\n        )\n    ",
        "description": "Add whether there is a bike parking fee",
        "wiki": "Tag:amenity=bicycle_parking",
        "icon": "ic_quest_bicycle_parking_fee",
        "title": "quest_bicycle_parking_fee_title"
    },
    "MarkCompletedBuildingConstruction": {
        "filters": [
            "ways with building = construction\n         and (!opening_date or opening_date < today)\n         and older today -6 months\n    ",
            "ways with building = construction\n         and (!opening_date or opening_date < today)\n         and older today -6 months\n    "
        ],
        "filter": "ways with building = construction\n         and (!opening_date or opening_date < today)\n         and older today -6 months\n    ",
        "description": "Determine whether construction is now completed",
        "wiki": "Tag:building=construction",
        "icon": "ic_quest_building_construction",
        "title": "quest_construction_building_title"
    },
    "AddIsDefibrillatorIndoor": {
        "filters": [
            "nodes with\n         emergency = defibrillator\n         and access !~ private|no\n         and !indoor\n    ",
            "nodes with\n         emergency = defibrillator\n         and access !~ private|no\n         and !indoor\n    "
        ],
        "filter": "nodes with\n         emergency = defibrillator\n         and access !~ private|no\n         and !indoor\n    ",
        "description": "Add whether defibrillator is inside building",
        "wiki": "Key:indoor",
        "icon": "ic_quest_defibrillator",
        "title": "quest_is_defibrillator_inside_title"
    },
    "AddRailwayCrossingBarrier": {
        "filters": [
            "nodes with\n          railway = level_crossing\n          and (!crossing:barrier or crossing:barrier older today -8 years)\n    ",
            "ways with\n          highway and access ~ private|no\n          or railway ~ tram|abandoned|disused\n    ",
            "nodes with\n          railway = level_crossing\n          and (!crossing:barrier or crossing:barrier older today -8 years)\n    ",
            "ways with\n          highway and access ~ private|no\n          or railway ~ tram|abandoned|disused\n    "
        ],
        "filter": "nodes with\n          railway = level_crossing\n          and (!crossing:barrier or crossing:barrier older today -8 years)\n    ",
        "description": "Add type of barrier for railway crossing",
        "wiki": "Key:crossing:barrier",
        "icon": "ic_quest_railway",
        "title": "quest_railway_crossing_barrier_title"
    },
    "AddCameraType": {
        "filters": [
            "nodes with\n         surveillance:type = camera\n         and surveillance ~ public|outdoor|traffic\n         and !camera:type\n    ",
            "nodes with\n         surveillance:type = camera\n         and surveillance ~ public|outdoor|traffic\n         and !camera:type\n    "
        ],
        "filter": "nodes with\n         surveillance:type = camera\n         and surveillance ~ public|outdoor|traffic\n         and !camera:type\n    ",
        "description": "Add camera type",
        "wiki": "Tag:surveillance:type",
        "icon": "ic_quest_surveillance_camera",
        "title": "quest_camera_type_title"
    },
    "AddAtmOperator": {
        "filters": [
            "nodes with amenity = atm and !operator and !name and !brand"
        ],
        "filter": "nodes with amenity = atm and !operator and !name and !brand",
        "description": "Add ATM operator",
        "wiki": "Tag:amenity=atm",
        "icon": "ic_quest_money",
        "title": "quest_atm_operator_title"
    },
    "AddPowerPolesMaterial": {
        "filters": [
            "nodes with\n          (power = pole or man_made = utility_pole)\n          and !material\n    ",
            "nodes with\n          (power = pole or man_made = utility_pole)\n          and !material\n    "
        ],
        "filter": "nodes with\n          (power = pole or man_made = utility_pole)\n          and !material\n    ",
        "description": "Add power poles material type",
        "wiki": "Tag:power=pole",
        "icon": "ic_quest_power",
        "title": "quest_powerPolesMaterial_title"
    },
    "AddReligionToWaysideShrine": {
        "filters": [
            "nodes, ways, relations with\n          historic = wayside_shrine\n          and !religion\n          and access !~ private|no\n    ",
            "nodes, ways, relations with\n          historic = wayside_shrine\n          and !religion\n          and access !~ private|no\n    "
        ],
        "filter": "nodes, ways, relations with\n          historic = wayside_shrine\n          and !religion\n          and access !~ private|no\n    ",
        "description": "Add religion for wayside shrine",
        "wiki": "Key:religion",
        "icon": "ic_quest_religion",
        "title": "quest_religion_for_wayside_shrine_title"
    },
    "AddSidewalk": {
        "filters": [
            "ways with highway ~ path|footway|cycleway|construction\n    ",
            "ways with\n          highway ~ trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|residential\n          and area != yes\n          and motorroad != yes\n          and !sidewalk and !sidewalk:left and !sidewalk:right and !sidewalk:both\n          and (\n            !maxspeed\n            or maxspeed > 8\n            or (maxspeed ~ ",
            "ways with highway ~ path|footway|cycleway|construction\n    "
        ],
        "filter": "ways with\n          highway ~ trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|residential\n          and area != yes\n          and motorroad != yes\n          and !sidewalk and !sidewalk:left and !sidewalk:right and !sidewalk:both\n          and (\n            !maxspeed\n            or maxspeed > 8\n            or (maxspeed ~ ",
        "description": "Add whether there are sidewalks",
        "wiki": "Key:sidewalk",
        "icon": "ic_quest_sidewalk",
        "title": "quest_sidewalk_title"
    },
    "AddSelfServiceLaundry": {
        "filters": [
            "nodes, ways with shop = laundry and !self_service"
        ],
        "filter": "nodes, ways with shop = laundry and !self_service",
        "description": "Add self service info",
        "wiki": "Tag:shop=laundry",
        "icon": "ic_quest_laundry",
        "title": "quest_laundrySelfService_title"
    },
    "AddPlaygroundAccess": {
        "filters": [
            "nodes, ways, relations with leisure = playground and (!access or access = unknown)"
        ],
        "filter": "nodes, ways, relations with leisure = playground and (!access or access = unknown)",
        "description": "Add playground access",
        "wiki": "Tag:leisure=playground",
        "icon": "ic_quest_playground",
        "title": "quest_playground_access_title"
    },
    "AddParkingType": {
        "filters": [
            "nodes, ways, relations with\n          amenity = parking\n          and (!parking or parking = yes)\n    ",
            "nodes, ways, relations with\n          amenity = parking\n          and (!parking or parking = yes)\n    "
        ],
        "filter": "nodes, ways, relations with\n          amenity = parking\n          and (!parking or parking = yes)\n    ",
        "description": "Add parking type",
        "wiki": "Tag:amenity=parking",
        "icon": "ic_quest_parking",
        "title": "quest_parkingType_title"
    },
    "AddPoliceType": {
        "filters": [
            "nodes, ways with\n          amenity = police\n          and !operator\n    ",
            "nodes, ways with\n          amenity = police\n          and !operator\n    "
        ],
        "filter": "nodes, ways with\n          amenity = police\n          and !operator\n    ",
        "description": "Add police type",
        "wiki": "Tag:amenity=police",
        "icon": "ic_quest_police",
        "title": "quest_policeType_title"
    },
    "AddLanes": {
        "filters": [
            "ways with\n          (\n            highway ~ motorway|motorway_link|trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|motorway|motorway_link|trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified\n            or highway = residential and (\n              maxspeed > 30\n              or (maxspeed ~ "
        ],
        "filter": "ways with\n          (\n            highway ~ motorway|motorway_link|trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified|motorway|motorway_link|trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link|unclassified\n            or highway = residential and (\n              maxspeed > 30\n              or (maxspeed ~ ",
        "description": "Add road lanes",
        "wiki": "Key:lanes",
        "icon": "ic_quest_street_lanes",
        "title": "quest_lanes_title"
    },
    "AddBuildingType": {
        "filters": [
            "ways, relations with (building = yes or building = unclassified)\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n         and !aeroway\n         and !description\n         and location != underground\n         and abandoned != yes\n         and abandoned != building\n         and abandoned:building != yes\n         and ruins != yes and ruined != yes\n    ",
            "ways, relations with (building = yes or building = unclassified)\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n         and !aeroway\n         and !description\n         and location != underground\n         and abandoned != yes\n         and abandoned != building\n         and abandoned:building != yes\n         and ruins != yes and ruined != yes\n    "
        ],
        "filter": "ways, relations with (building = yes or building = unclassified)\n         and !man_made\n         and !historic\n         and !military\n         and !power\n         and !tourism\n         and !attraction\n         and !amenity\n         and !leisure\n         and !aeroway\n         and !description\n         and location != underground\n         and abandoned != yes\n         and abandoned != building\n         and abandoned:building != yes\n         and ruins != yes and ruined != yes\n    ",
        "description": "Add building types",
        "wiki": "Key:building",
        "icon": "ic_quest_building",
        "title": "quest_buildingType_title"
    },
    "AddBikeParkingType": {
        "filters": [
            "nodes, ways with\n          amenity = bicycle_parking\n          and access !~ private|no\n          and !bicycle_parking\n    ",
            "nodes, ways with\n          amenity = bicycle_parking\n          and access !~ private|no\n          and !bicycle_parking\n    "
        ],
        "filter": "nodes, ways with\n          amenity = bicycle_parking\n          and access !~ private|no\n          and !bicycle_parking\n    ",
        "description": "Add bicycle parking type",
        "wiki": "Key:bicycle_parking",
        "icon": "ic_quest_bicycle_parking",
        "title": "quest_bicycle_parking_type_title"
    },
    "AddInternetAccess": {
        "filters": [
            "nodes, ways, relations with\n        (\n          amenity ~ library|community_centre|youth_centre\n          or tourism ~ hotel|guest_house|motel|hostel|alpine_hut|apartment|resort|camp_site|caravan_site|chalet\n        )\n        and access !~ no|private\n        and name\n        and (\n          !internet_access\n          or internet_access = yes\n          or internet_access older today -2 years\n        )\n    ",
            "nodes, ways, relations with\n        (\n          amenity ~ library|community_centre|youth_centre\n          or tourism ~ hotel|guest_house|motel|hostel|alpine_hut|apartment|resort|camp_site|caravan_site|chalet\n        )\n        and access !~ no|private\n        and name\n        and (\n          !internet_access\n          or internet_access = yes\n          or internet_access older today -2 years\n        )\n    "
        ],
        "filter": "nodes, ways, relations with\n        (\n          amenity ~ library|community_centre|youth_centre\n          or tourism ~ hotel|guest_house|motel|hostel|alpine_hut|apartment|resort|camp_site|caravan_site|chalet\n        )\n        and access !~ no|private\n        and name\n        and (\n          !internet_access\n          or internet_access = yes\n          or internet_access older today -2 years\n        )\n    ",
        "description": "Add internet access",
        "wiki": "Key:internet_access",
        "icon": "ic_quest_wifi",
        "title": "quest_internet_access_name_title"
    },
    "AddBikeParkingCover": {
        "filters": [
            "nodes, ways with\n         amenity = bicycle_parking\n         and access !~ private|no\n         and !covered\n         and bicycle_parking !~ shed|lockers|building\n    ",
            "nodes, ways with\n         amenity = bicycle_parking\n         and access !~ private|no\n         and !covered\n         and bicycle_parking !~ shed|lockers|building\n    "
        ],
        "filter": "nodes, ways with\n         amenity = bicycle_parking\n         and access !~ private|no\n         and !covered\n         and bicycle_parking !~ shed|lockers|building\n    ",
        "description": "Add bicycle parkings cover",
        "wiki": "Tag:amenity=bicycle_parking",
        "icon": "ic_quest_bicycle_parking_cover",
        "title": "quest_bicycleParkingCoveredStatus_title"
    },
    "AddCrossingType": {
        "filters": [
            "nodes with highway = crossing\n          and foot != no\n          and (\n            !crossing\n            or crossing ~ island|unknown|yes\n            or (\n              crossing ~ traffic_signals|uncontrolled|zebra|marked|unmarked\n              and crossing older today -8 years\n            )\n          )\n    ",
            "ways with\n          highway and access ~ private|no\n    ",
            "nodes with highway = crossing\n          and foot != no\n          and (\n            !crossing\n            or crossing ~ island|unknown|yes\n            or (\n              crossing ~ traffic_signals|uncontrolled|zebra|marked|unmarked\n              and crossing older today -8 years\n            )\n          )\n    ",
            "ways with\n          highway and access ~ private|no\n    "
        ],
        "filter": "nodes with highway = crossing\n          and foot != no\n          and (\n            !crossing\n            or crossing ~ island|unknown|yes\n            or (\n              crossing ~ traffic_signals|uncontrolled|zebra|marked|unmarked\n              and crossing older today -8 years\n            )\n          )\n    ",
        "description": "Add crossing type",
        "wiki": "Key:crossing",
        "icon": "ic_quest_pedestrian_crossing",
        "title": "quest_crossing_type_title"
    }
}